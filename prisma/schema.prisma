// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Chain {
  MAINNET
  DEVNET
  SUI_MAINNET
  SUI_TESTNET
}

enum WalletChain {
  SOLANA
  SUI
}

model User {
  id String @id @default(cuid())

  walletAddress String  @unique
  username      String? @unique

  metaSpendPriv String
  metaViewPriv  String
  metaSpendPub  String
  metaViewPub   String

  links Link[]
  withdrawals Withdrawal[]

  walletChain WalletChain @default(SOLANA)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LinkType {
  SIMPLE
  DOWNLOAD
}

enum LinkAmountType {
  OPEN
  FIXED
}

model Link {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  emoji           String @default("ðŸ”—")
  backgroundColor String @default("gray")

  tag         String // "" = root personal link
  label       String // human label (max-32 for on-chain `label`)
  description String?

  specialTheme String @default("default")

  type       LinkType
  amountType LinkAmountType

  // For FIXED amount type - stores human readable amount (e.g. 0.5 SOL, not 500000000)
  amount    Float?
  mintId    String?
  mint      MintDataCache? @relation(fields: [mintId], references: [id])

  file       File?
  payments   Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tag])
}

model File {
  id String @id @default(cuid())

  linkId String @unique
  link   Link   @relation(fields: [linkId], references: [id], onDelete: Cascade)

  filename String
  mimetype String
  size     Int
  data     Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ActivityType {
  PAYMENT
  WITHDRAWAL
}

// Events indexing
model Payment {
  txHash String @id
  chain  Chain

  slot      Int
  timestamp Int

  stealthOwnerPubkey String
  ephemeralPubkey    String
  payerPubKey        String

  mintId String
  mint   MintDataCache @relation(fields: [mintId], references: [id])

  amount BigInt

  label    String?
  memo     String?
  announce Boolean @default(false)

  linkId String?
  link   Link?   @relation(fields: [linkId], references: [id], onDelete: Cascade)

  isProcessed Boolean @default(false)

  createdAt DateTime @default(now())
}

model Withdrawal {
  txHash String
  chain  Chain

  slot      Int
  timestamp Int

  stealthOwnerPubkey String
  destinationPubkey  String

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  amount      String

  isProcessed Boolean @default(false)

  mint   MintDataCache @relation(fields: [mintId], references: [id])
  mintId String

  createdAt DateTime @default(now())

  @@id([txHash, stealthOwnerPubkey])
}

model MintDataCache {
  id String @id @default(cuid())

  mintAddress String
  chain       Chain

  payments Payment[]
  withdrawals Withdrawal[]
  links Link[]

  name        String
  symbol      String
  decimals    Int
  imageUrl    String?
  description String?
  uriData     Json?
  priceUsd    Float? @default(0)

  isInvalid Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([mintAddress, chain])
}


model MainPrice {
  id       String @id @default(cuid())
  symbol   String @unique
  priceUsd Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}