// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Chain {
  MAINNET
  DEVNET
}

model User {
  id String @id @default(cuid())

  walletAddress String  @unique
  username      String? @unique

  metaSpendPriv String
  metaViewPriv  String

  links Link[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LinkType {
  SIMPLE
  DOWNLOAD
}

enum LinkAmountType {
  OPEN
  FIXED
}

model Link {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  emoji String @default("ðŸ”—")
  backgroundColor String @default("gray")

  tag   String // "" = root personal link
  label String // human label (max-32 for on-chain `label`)
  description String?

  type LinkType 
  amountType LinkAmountType 

  file File?
  amountData Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tag])
}

model File {
  id String @id @default(cuid())

  linkId String @unique
  link   Link   @relation(fields: [linkId], references: [id], onDelete: Cascade)

  filename  String
  mimetype  String
  size      Int
  data      Bytes
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Events indexing
model Payment {
  txHash String @id
  chain  Chain

  slot      Int
  timestamp Int

  stealthOwnerPubkey String
  ephemeralPubkey    String
  payerPubKey        String

  mintAddress String
  amount      BigInt

  label String?

  createdAt DateTime @default(now())
}

model Withdrawal {
  txHash String @id
  chain  Chain

  slot      Int
  timestamp Int

  stealthOwnerPubkey String
  destinationPubkey  String

  mintAddress String
  amount      String

  createdAt DateTime @default(now())
}

model MintDataCache {
  id String @id @default(cuid())

  mintAddress String
  chain       Chain

  name        String
  symbol      String
  decimals    Int
  imageUrl    String?
  description String?
  uriData     Json?

  isInvalid Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([mintAddress, chain])
}
